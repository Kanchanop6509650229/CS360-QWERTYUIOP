name: CD - Deploy to AWS

on:
  push:
    branches:
      - main 
      - develop
      - improvement-coding-and-documentation

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create EC2 instance
        id: create-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0230bd60aa48260c6 \
            --instance-type t2.medium \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --user-data file://user-data.sh \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FoodAdvisor-Production}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          
          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
          
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
            
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Copy Docker Compose files
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
        run: |
          echo "Creating deployment directory..."
          mkdir -p deployment
          
          cp docker-compose.yml deployment/
          
          # Create .env file for Docker Compose
          cat << EOF > deployment/.env
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }}
          PREVIEW_SECRET=$(openssl rand -hex 32)
          PUBLIC_IP=${INSTANCE_IP}
          EOF

      - name: Install netcat
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd
  
      - name: Wait for SSH
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
        run: |
          echo "Waiting for SSH to become available..."
          # Try until port 22 is open
          while ! nc -z $INSTANCE_IP 22; do
            echo "SSH not ready yet..."
            sleep 10
          done
          # Additional wait for user-data script to complete
          sleep 60
          echo "SSH is ready!"

      - name: Deploy using Docker Compose
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
          PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
        run: |
          # Save private key
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Copy files to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no -r deployment/* ec2-user@${INSTANCE_IP}:~/
          
          # Deploy using Docker Compose
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} '
            docker-compose pull
            docker-compose up -d
          '

      - name: Verify deployment
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
        run: |
          echo "Waiting for services to initialize..."
          sleep 30
          
          echo "Checking API health..."
          curl -f http://${INSTANCE_IP}:1337/admin
          
          echo "Checking Client health..."
          curl -f http://${INSTANCE_IP}:3000
          
          echo "Deployment Summary:"
          echo "API URL: http://${INSTANCE_IP}:1337"
          echo "Client URL: http://${INSTANCE_IP}:3000"