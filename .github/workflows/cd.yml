name: CD - Deploy to AWS

on:
  push:
    branches:
      - main 
      - develop
      - improvement-coding-and-documentation

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create EC2 instance
        id: create-ec2
        run: |
          # Create EC2 instance with larger root volume
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0230bd60aa48260c6 \
            --instance-type t2.medium \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --block-device-mappings '[{"DeviceName":"/dev/xvda","Ebs":{"VolumeSize":30,"VolumeType":"gp3"}}]' \
            --user-data file://user-data.sh \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FoodAdvisor-Production}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          
          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
          
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
            
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Deploy using Docker Compose
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
          PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
          PREVIEW_SECRET: ${{ secrets.PREVIEW_SECRET }}
        run: |
          # Save private key
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
    
          # Create API environment file
          cat << EOF > api.env
          HOST=0.0.0.0
          PORT=1337
          NODE_ENV=development
          JWT_SECRET=${JWT_SECRET}
          ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
          STRAPI_ADMIN_CLIENT_URL=http://${INSTANCE_IP}:3000
          STRAPI_ADMIN_CLIENT_PREVIEW_SECRET=${PREVIEW_SECRET}
          EOF

          # Create Client environment file
          cat << EOF > client.env
          NODE_ENV=development
          NEXT_PUBLIC_API_URL=http://${INSTANCE_IP}:1337
          PREVIEW_SECRET=${PREVIEW_SECRET}
          EOF

          # Create docker environment file
          cat << EOF > .env
          DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
          EOF
    
          # Wait for user-data script to complete
          echo "Waiting for instance setup to complete..."
          sleep 90
    
          # Copy files to EC2
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            .env api.env client.env docker-compose.yml \
            ec2-user@${INSTANCE_IP}:~/
    
          # Deploy using Docker Compose
          ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} << 'EOF'
            # Create required directories
            sudo mkdir -p /app/public/uploads
            sudo chown -R ec2-user:docker /app/public/uploads
      
            # Load environment variables
            set -a
            source .env
            set +a
      
            # Pull images and start containers
            sudo docker-compose pull
            sudo docker-compose up -d
      
            # Verify containers are running
            sudo docker-compose ps
      
            # Check API environment
            echo "Verifying API environment variables..."
            sudo docker exec foodadvisor-api printenv | grep -E "JWT_SECRET|ADMIN_JWT_SECRET|PREVIEW_SECRET"
      
            # Check Client environment
            echo "Verifying Client environment variables..."
            sudo docker exec foodadvisor-client printenv | grep -E "PREVIEW_SECRET|NEXT_PUBLIC_API_URL"
          EOF

      - name: Verify deployment with enhanced checks
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
        run: |
          echo "Verifying deployment..."
          
          # Function to check endpoint
          check_endpoint() {
            local url=$1
            local max_attempts=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt to connect to $url"
              if curl --silent --fail "$url" > /dev/null; then
                return 0
              fi
              attempt=$((attempt + 1))
              sleep 15
            done
            return 1
          }
          
          # Check API endpoint
          if ! check_endpoint "http://${INSTANCE_IP}:1337/admin"; then
            echo "API endpoint verification failed"
            exit 1
          fi
          
          # Check client endpoint
          if ! check_endpoint "http://${INSTANCE_IP}:3000"; then
            echo "Client endpoint verification failed"
            exit 1
          fi
          
          echo "Deployment verified successfully!"
