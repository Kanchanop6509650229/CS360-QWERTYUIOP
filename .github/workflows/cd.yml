name: CD - Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
      - improvement-coding-and-documentation
      - test-cd

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if Docker Image Exists API
        id: check_image_API
        run: |
          REPOSITORYAPI="${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-api"  
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORYAPI}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
            fi
          echo "Docker image exists. Proceeding to deployment."

      - name: Check if Docker Image Exists Client
        id: check_image_client
        run: |
          REPOSITORYCLIENT="${{ secrets.DOCKERHUB_USERNAME }}/foodadvisor-client"
          TAG="latest"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" https://hub.docker.com/v2/repositories/${REPOSITORYCLIENT}/tags/${TAG}/)
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found. Exiting workflow."
              exit 1
          fi
          echo "Docker image exists. Proceeding to deployment."

      - name: Create EC2 instance
        id: create-ec2
        run: |
          # Create EC2 instance with larger root volume
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0230bd60aa48260c6 \
            --instance-type t2.medium \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --block-device-mappings '[{"DeviceName":"/dev/xvda","Ebs":{"VolumeSize":30,"VolumeType":"gp3"}}]' \
            --user-data file://user-data.sh \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=FoodAdvisor-Production}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

          aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}

          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
            
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

          - name: Deploy using Docker
          env:
            INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
            PRIVATE_KEY: ${{ secrets.AWS_SSH_KEY }}
            DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}
            PREVIEW_SECRET: ${{ secrets.PREVIEW_SECRET }}
          run: |
            # Save private key
            echo "$PRIVATE_KEY" > private_key.pem
            chmod 600 private_key.pem
        
            # Wait for instance setup to complete
            echo "Waiting for instance setup to complete..."
            sleep 90
        
            # Deploy using Docker
            ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${INSTANCE_IP} << EOF
              # Stop and remove existing containers if they exist
              sudo docker rm -f foodadvisor-api foodadvisor-client || true
              
              echo "Deploying API"
              sudo docker pull ${DOCKERHUB_USERNAME}/foodadvisor-api:latest
              sudo docker run -d --name foodadvisor-api \
                -p 1337:1337 \
                -e HOST=0.0.0.0 \
                -e PORT=1337 \
                -e DATABASE_CLIENT=sqlite \
                -e DATABASE_FILENAME=.tmp/data.db \
                -e JWT_SECRET="${JWT_SECRET}" \
                -e ADMIN_JWT_SECRET="${ADMIN_JWT_SECRET}" \
                -e STRAPI_ADMIN_CLIENT_URL="http://${INSTANCE_IP}:3000" \
                -e STRAPI_ADMIN_CLIENT_PREVIEW_SECRET="${PREVIEW_SECRET}" \
                -v foodadvisor-uploads:/app/api/public/uploads \
                ${DOCKERHUB_USERNAME}/foodadvisor-api:latest
        
              echo "Deploying Client"
              sudo docker pull ${DOCKERHUB_USERNAME}/foodadvisor-client:latest
              sudo docker run -d --name foodadvisor-client \
                -p 3000:3000 \
                -e NEXT_PUBLIC_API_URL="http://${INSTANCE_IP}:1337" \
                -e PREVIEW_SECRET="${PREVIEW_SECRET}" \
                ${DOCKERHUB_USERNAME}/foodadvisor-client:latest
        
              # Verify environment variables
              echo "API Container Environment:"
              sudo docker exec foodadvisor-api env | sort
              
              echo "Client Container Environment:"
              sudo docker exec foodadvisor-client env | sort
            EOF

      - name: Verify deployment with enhanced checks
        env:
          INSTANCE_IP: ${{ steps.create-ec2.outputs.public_ip }}
        run: |
          echo "Verifying deployment..."

          # Function to check endpoint
          check_endpoint() {
            local url=$1
            local max_attempts=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt to connect to $url"
              if curl --silent --fail "$url" > /dev/null; then
                return 0
              fi
              attempt=$((attempt + 1))
              sleep 15
            done
            return 1
          }

          # Check API endpoint
          if ! check_endpoint "http://${INSTANCE_IP}:1337/admin"; then
            echo "API endpoint verification failed"
            exit 1
          fi

          # Check client endpoint
          if ! check_endpoint "http://${INSTANCE_IP}:3000"; then
            echo "Client endpoint verification failed"
            exit 1
          fi

          echo "Deployment verified successfully!"
